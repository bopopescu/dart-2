// Copyright (c) 2011, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Native helpers generated by the compiler
// TODO(jmesserly): more natives should use this pattern

// Translate a JavaScript exception to a Dart exception
// TODO(jmesserly): cross browser support. This is Chrome specific.
_toDartException(e) native @"""{
  var res = e;
  if (e instanceof TypeError) {
    switch(e.type) {
      case 'property_not_function':
      case 'called_non_callable':
        if (e.arguments[0] == null) {
          res = new NullPointerException();
        } else {
          res = new ObjectNotClosureException();
        }
        break;
      case 'non_object_property_call':
      case 'non_object_property_load':
        res = new NullPointerException();
        break;
      case 'undefined_method':
        if (e.arguments[0] == 'call' || e.arguments[0] == 'apply') {
          res = new ObjectNotClosureException();
        } else {
          // TODO(jmesserly): can this ever happen?
          res = new NoSuchMethodException('', e.arguments[0], []);
        }
        break;
    }
  } else if (e instanceof RangeError) {
    if (e.message.indexOf('call stack') >= 0) {
      res = new StackOverflowException();
    }
  }
  if (res) {
    // TODO(jmesserly): setting the stack property is not a long term solution.
    // Also it causes the exception to print as if it were a JS TypeError or
    // RangeError, instead of using the proper toString.
    res.stack = e.stack;
  }
  return res;
}""" {
  // Ensure constructors are generated
  new ObjectNotClosureException();
  new NullPointerException();
  new NoSuchMethodException(null, null, null);
  new StackOverflowException();
}
