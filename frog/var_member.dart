// Copyright (c) 2011, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/** A dynamic member stub. */
class VarMember {
  final String name;

  VarMember(this.name);

  abstract void generate(CodeWriter code);

  Type get returnType() => world.varType;

  Value invoke(MethodGenerator context, Node node, Value target, Arguments args) {
    return new Value(returnType,
      '${target.code}.$name(${args.getCode()})');
  }
}

/**
 * This function generates a dynamic call stub for functions. It's part of a
 * series of steps described below. Most of the code is generated by
 * gen.dart, with some helpers in core.js
 *
 * Given a call site in Dart like:
 *   f(1, 2, capture:true);
 *
 * We compile to JS like:
 *   f.call$2$capture(1, 2, true);
 *
 * And then generate this function:
 *   Function.prototype.call$2$capture = function($0, $1, capture) {
 *     this.call$2$capture = this.$genStub(3, ['capture']);
 *     return this.call$2$capture($0, $1, capture);
 *   }
 *
 * Or for a fixed-arity function, generate this:
 *   Function.prototype.call$2 = function($0, $1) {
 *     return this.to$call$2()($0, $1);
 *   }
 *   Function.prototype.to$call$2 = function() {
 *     this.call$2 = this.$genStub(2);
 *     this.to$call$2 = function() { return this.call$2; }
 *     return this.to$call$2();
 *   }
 * We use .to$call$2 to convert to a typed function.
 *
 * For each method that can be passed as a function, such as a "get" on the
 * method or is a lambda, generate optional argument info. Given a function
 * like:
 *   class SomeType {
 *     void add(x, y, [bubbles = true, capture = false]) { ... }
 *     ... }
 *
 * The generated argument info looks like:
 *  SomeType.prototype.add.$optional = ['bubbles','capture', 'true','false'];
 */
// TODO(jmesserly): we don't currently put $optional on lambdas.
// Also, maybe a string encoding would perform better?
class VarFunctionStub extends VarMember {
  final Arguments args;

  VarFunctionStub(String name, Arguments callArgs)
    : super(name), args = callArgs.toCallStubArgs();

  void generate(CodeWriter code) {
    if (args.hasNames) {
      generateNamed(code);
    } else {
      generatePositional(code);
    }
  }

  void generatePositional(CodeWriter w) {
    // Positional arg functions can be converted from "var" to a fixed arity
    // function type. So emit a to$N stub as well as the call$N stub.
    int arity = args.length;
    w.enterBlock('Function.prototype.to\$$name = function() {');
    w.writeln('this.$name = this.\$genStub($arity);');
    w.writeln('this.to\$$name = function() { return this.$name; };');
    w.writeln('return this.$name;');
    w.exitBlock('};');
    var argsCode = args.getCode();
    w.enterBlock('Function.prototype.$name = function(${argsCode}) {');
    w.writeln('return this.to\$$name()($argsCode);');
    w.exitBlock('};');

    // TODO(jmesserly): HACK, we can't allocate temps from Value, so we need
    // one more stub to check for null.
    w.writeln('function to\$$name(f) { return f && f.to\$$name(); }');
  }

  void generateNamed(CodeWriter w) {
    // Named functions use simpler stubs, because we never convert to a named
    // stub type.
    var named = Strings.join(args.getNames(), '", "');
    var argsCode = args.getCode();
    w.enterBlock('Function.prototype.$name = function(${argsCode}) {');
    w.writeln('this.$name = this.\$genStub(${args.length}, ["$named"]);');
    w.writeln('return this.$name($argsCode);');
    w.exitBlock('}');
  }
}

class VarMethodStub extends VarMember {
  final Member member;
  final Arguments args;
  final Value body;

  VarMethodStub(String name, this.member, this.args, this.body): super(name);

  Type get returnType() =>
      member != null ? member.returnType : world.varType;

  String get typeName() =>
      member != null ? member.declaringType.jsname : 'Object';

  void generate(CodeWriter code) {
    code.write('$typeName.prototype.$name = ');
    generateBody(code);
    code.writeln(';');
  }

  void generateBody(CodeWriter code) {
    if (_useDirectCall(member, args)) {
      code.write('$typeName.prototype.${member.jsname}');
    } else {
      code.enterBlock('function(${args.getCode()}) {');
      code.writeln('return ${body.code};');
      code.exitBlock('}');
    }
  }

  bool _useDirectCall(Member member, Arguments args) {
    // TODO(jmesserly): for now disallow direct references to DOM types until we
    // figure out which types can be patched reliably.
    // I don't think our other native libs have this issue.
    if (member is MethodMember && member.declaringType.library != world.dom) {
      MethodMember method = member;
      if (method.needsArgumentConversion(args)) {
        return false;
      }

      // If we have the right number of parameters, or all defaults would be
      // filled in as "undefined" anyway, we can just call the method directly.
      for (int i = args.length; i < method.parameters.length; i++) {
        if (method.parameters[i].value.code != 'null') {
          return false;
        }
      }
      return method.namesInOrder(args);
    } else {
      return false;
    }
  }
}

/**
 * A special member with a mangled name that represents a dynamic call
 * (i.e. a call with multiple valid targets). We generate this if we have
 * a dynamic call that needs different implementation methods for different
 * members.
 */
class VarMethodSet extends VarMember {
  final List<Member> members;
  final Type returnType;
  final Arguments args;

  /** The fallback stubs that need to be in our Object.prototype stub. */
  List<VarMethodStub> _fallbackStubs;

  VarMethodSet(String name, this.members, Arguments callArgs, this.returnType)
    : super(name), args = callArgs.toCallStubArgs() {
  }

  /** The unmangled member name. */
  String get baseName() => members[0].name;

  Value invoke(MethodGenerator context, Node node, Value target, Arguments args) {
    _invokeMembers(context, node);
    return super.invoke(context, node, target, args);
  }

  /** Invokes members to ensure they're generated. */
  _invokeMembers(MethodGenerator context, Node node) {
    if (_fallbackStubs != null) return;

    _fallbackStubs = [];
    for (var member in members) {
      // Invoke the member with the stub args (this gives us the method body),
      // then create the stub method.
      final target = new Value(member.declaringType, 'this');
      var result = member.invoke(context, node, target, args);
      var stub = new VarMethodStub(name, member, args, result);

      // Put the stub on the type directly if possible. Otherwise
      // put the stub on Object.prototype.
      var type = member.declaringType;
      if (type.library != world.dom && !type.isObject) {
        _addVarStub(type, stub);
      } else {
        _fallbackStubs.add(stub);
      }
    }

    // Finally, invoke noSuchMethod
    final target = new Value(world.objectType, 'this');
    var result = target.invokeNoSuchMethod(context, baseName, node, args);
    var stub = new VarMethodStub(name, null, args, result);
    if (_fallbackStubs.length == 0) {
      _addVarStub(world.objectType, stub);
    } else {
      _fallbackStubs.add(stub);
    }
  }

  static _addVarStub(Type type, VarMember stub) {
    if (type.varStubs == null) type.varStubs = {};
    type.varStubs[stub.name] = stub;
  }

  /**
   * Generate var call fallbacks, like this:
   *
   * $varMethod('addEventListener$1$capture', {
   *   'HTMLElement': function($0, capture) {
   *     return this.addEventListener($0, capture);
   *   },
   *   'SomeOtherDOMType': function($0, capture) {
   *     return this.addEventListener($0, false, true, capture);
   *   },
   *   'Object': function($0, capture) {
   *     return this.noSuchMethod('addEventListener', [$0],
   *       {'capture': capture});
   *   }
   * });
   */
  void generate(CodeWriter code) {
    if (_fallbackStubs.length == 0) return;

    code.enterBlock('\$varMethod("$name", {');
    for (var stub in _fallbackStubs) {
      code.write('"${stub.typeName}": ');
      stub.generateBody(code);
      code.writeln(',');
    }
    code.exitBlock('});');
  }
}

String _getCallStubName(String name, Arguments args) {
  final nameBuilder = new StringBuffer('${name}\$${args.bareCount}');
  for (int i = args.bareCount; i < args.length; i++) {
    nameBuilder.add('\$').add(args.getName(i));
  }
  return nameBuilder.toString();
}
